
# Simple upstream configuration, utilizes module state initialized in worker to implement
# basic round robin. Can be merged with balancer.lua, left here for illustration.
upstream consul {
  server localhost:80;

  balancer_by_lua_block {
    local balancer = require "ngx.balancer"
    local consul_balancer = require "balancer"

    local peer = consul_balancer.next(ngx.ctx.service)

    if peer == nil then
      ngx.log(ngx.ERR, "no peer found for service: ", ngx.ctx.service)
      return ngx.exit(500)
    end

    local ok, err = balancer.set_current_peer(peer["address"], peer["port"])
    if not ok then
      ngx.log(ngx.ERR, "failed to set the current peer: ", err)
      return ngx.exit(500)
    end
  }

  keepalive 12;
}

server {
  listen 81 default_server;
  listen [::]:81 default_server;

  server_name _;

  location / {
    index  index.html;
  }

  # Define our endpoints here, hand responsible service to upstream
  # via ngx.ctx

  location /django {
    access_by_lua 'ngx.ctx.service = "django"';
    proxy_pass http://consul/;
  }
}
